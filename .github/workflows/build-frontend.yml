name: Build frontend and deploy to docker

on:
  pull_request:
    branches:
      - main
    paths:
      - frontend/**

defaults:
  run:
    working-directory: frontend

jobs:
  eslint:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16
 
      - uses: actions/checkout@v3
 
      - name: Install packages
        run: yarn install
 
      - name: Run eslint
        run: yarn lint .

  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend

  # deploy-helm:
  #   runs-on: ubuntu-latest
  #   needs: [build-and-deploy]
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Create k8s Kind Cluster
  #       uses: helm/kind-action@v1.4.0

  #     - name: Set up Helm
  #       uses: azure/setup-helm@v3
  #       with:
  #         version: v3.10.0

  #     - name: Install frontend helm dependencies
  #       run: |
  #         helm dep update
  #       working-directory: ./frontend/helm

  #     - name: Install github docker secret
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         kubectl create secret docker-registry $IMAGE_PULL_SECRET_NAME \
  #           --docker-server="$REGISTRY" \
  #           --docker-username="$IMAGE_NAME" \
  #           --docker-password="$GITHUB_TOKEN" \
  #           --docker-email="" \
  #           --namespace="default"

  #     - name: Deploy helm chart
  #       run: |
  #         helm upgrade tim . --install \
  #           --set versionTag="$IMAGE_TAG" \
  #           --set image.pullSecrets[0].name="$IMAGE_PULL_SECRET_NAME" \
  #           --namespace default \
  #           --wait --timeout 300s
  #       working-directory: ./frontend/helm

  #     - name: Debug failure
  #       if: failure()
  #       run: |
  #         kubectl get deployment -A
  #         kubectl get services -A
  #         kubectl get ingress -A
  #         kubectl describe deployment tim-frontend
  #         kubectl describe pod